{
  "version": 3,
  "sources": ["../../src/dom/jsonld.ts", "../../src/core.ts", "../../src/parse.ts", "../../src/format.ts", "../../src/domain.ts", "../src/content.tsx"],
  "sourcesContent": ["export function getJsonLdScriptsFromDocument(\n  doc: Document = document\n): string[] {\n  const nodes = Array.from(\n    doc.querySelectorAll('script[type=\"application/ld+json\"]')\n  );\n  return nodes.map((n) => n.textContent || \"\").filter(Boolean);\n}\n", "/*\n  Core types, units, constants, and shared utilities\n*/\n\nexport type CanonicalUnit =\n  | \"g\"\n  | \"kg\"\n  | \"mg\"\n  | \"ml\"\n  | \"l\"\n  | \"tsp\"\n  | \"tbsp\"\n  | \"cup\"\n  | \"go\"\n  | \"cm\"\n  | \"serving\"\n  | \"piece\"\n  | \"slice\"\n  | \"block\"\n  | \"stalk\"\n  | \"leaf\"\n  | \"pinch\"\n  | \"clove\"\n  | \"can\"\n  | \"pack\"\n  | \"bag\"\n  | \"bunch\"\n  | \"head\"\n  | \"tail\"\n  | \"grain\"\n  | \"unknown\";\n\nexport type NormalizedIngredient = {\n  originalText: string;\n  name: string;\n  quantity?: number;\n  quantityRange?: { min: number; max: number };\n  unit?: CanonicalUnit;\n  unitText?: string;\n  prefix?: string;\n  suffix?: string;\n  // \u88DC\u52A9\uFF08\u7B2C2\uFF09\u6570\u91CF\u30FB\u5358\u4F4D\n  secondaryQuantity?: number;\n  secondaryQuantityRange?: { min: number; max: number };\n  secondaryUnit?: CanonicalUnit;\n  secondaryUnitText?: string;\n  secondaryPrefix?: string;\n  secondarySuffix?: string;\n  scalable: boolean;\n};\n\nexport type NormalizedInstruction = {\n  text: string;\n  imageUrl?: string;\n  name?: string;\n  url?: string;\n};\n\nexport type NormalizedRecipe = {\n  name?: string;\n  imageUrl?: string;\n  author?: string;\n  yieldText?: string;\n  baseServings?: number;\n  ingredients: NormalizedIngredient[];\n  instructions: NormalizedInstruction[];\n  times?: { prep?: string; cook?: string; total?: string };\n  nutrition?: Record<string, string>;\n};\n\n// Yield normalization (servings / counts)\nexport type NormalizedYield = {\n  originalText: string;\n  // \u6570\u91CF\u30FB\u5358\u4F4D\uFF08\u4EBA\u6570\u3082\u542B\u3080: unit \u306F 'serving' \u3092\u4F7F\u7528\uFF09\n  quantity?: number;\n  quantityRange?: { min: number; max: number };\n  unit?: CanonicalUnit;\n  unitText?: string;\n  prefix?: string;\n  suffix?: string;\n  // \u62EC\u5F27\u5185\u306A\u3069\u306E\u7B2C2\u6570\u91CF\u30FB\u5358\u4F4D\n  secondaryQuantity?: number;\n  secondaryQuantityRange?: { min: number; max: number };\n  secondaryUnit?: CanonicalUnit;\n  secondaryUnitText?: string;\n  secondaryPrefix?: string;\n  secondarySuffix?: string;\n  scalable: boolean;\n};\n\n// Unit dictionaries\nexport const unitMap: Record<string, CanonicalUnit> = {\n  // weight\n  g: \"g\",\n  gram: \"g\",\n  grams: \"g\",\n  \u30B0\u30E9\u30E0: \"g\",\n  kg: \"kg\",\n  kilogram: \"kg\",\n  kilograms: \"kg\",\n  \u30AD\u30ED: \"kg\",\n  \u30AD\u30ED\u30B0\u30E9\u30E0: \"kg\",\n  mg: \"mg\",\n  \u30DF\u30EA\u30B0\u30E9\u30E0: \"mg\",\n  // volume\n  ml: \"ml\",\n  \u30DF\u30EA\u30EA\u30C3\u30C8\u30EB: \"ml\",\n  l: \"l\",\n  litre: \"l\",\n  liter: \"l\",\n  \u30EA\u30C3\u30C8\u30EB: \"l\",\n  \u2113: \"l\",\n  cc: \"ml\",\n  // spoons & cup\n  tsp: \"tsp\",\n  teaspoon: \"tsp\",\n  teaspoons: \"tsp\",\n  Tsp: \"tsp\",\n  TSP: \"tsp\",\n  \"tsp.\": \"tsp\",\n  \u5C0F\u3055\u3058: \"tsp\",\n  \u5C0F\u5319: \"tsp\",\n  \u5C0F: \"tsp\",\n  tbsp: \"tbsp\",\n  tablespoon: \"tbsp\",\n  tablespoons: \"tbsp\",\n  Tbsp: \"tbsp\",\n  TBSP: \"tbsp\",\n  TBS: \"tbsp\",\n  \"tbsp.\": \"tbsp\",\n  \u5927\u3055\u3058: \"tbsp\",\n  \u5927\u5319: \"tbsp\",\n  \u5927: \"tbsp\",\n  cup: \"cup\",\n  cups: \"cup\",\n  Cup: \"cup\",\n  Cups: \"cup\",\n  \u30AB\u30C3\u30D7: \"cup\",\n  \u676F: \"cup\",\n  \u5408: \"go\",\n  // counts/shapes\n  \u500B: \"piece\",\n  \u500B\u5206: \"piece\",\n  \u500B\u5165\u308A: \"piece\",\n  \u53F0: \"piece\",\n  \u65A4: \"piece\",\n  piece: \"piece\",\n  pieces: \"piece\",\n  \u679A: \"slice\",\n  slice: \"slice\",\n  slices: \"slice\",\n  \u4E01: \"block\",\n  \u584A: \"block\",\n  block: \"block\",\n  \u672C: \"stalk\",\n  stalk: \"stalk\",\n  stalks: \"stalk\",\n  \u8449: \"leaf\",\n  leaf: \"leaf\",\n  leaves: \"leaf\",\n  \u7247: \"clove\",\n  clove: \"clove\",\n  cloves: \"clove\",\n  \u7F36: \"can\",\n  can: \"can\",\n  cans: \"can\",\n  \u30D1\u30C3\u30AF: \"pack\",\n  P: \"pack\",\n  p: \"pack\",\n  \u888B: \"bag\",\n  \u5C0F\u888B: \"bag\",\n  \u675F: \"bunch\",\n  \u623F: \"bunch\",\n  \u682A: \"head\",\n  \u5207\u308C: \"slice\",\n  cm: \"cm\",\n  \u5C3E: \"tail\",\n  \u7C92: \"grain\",\n  \u7F36\u8A70: \"can\",\n  \u304B\u3051: \"clove\",\n  \u304B\u3051\u3089: \"clove\",\n  // size modifiers\n  \u5927\u7389: \"piece\",\n  \u4E2D\u7389: \"piece\",\n  \u5C0F\u7389: \"piece\",\n  // micro\n  \u5C11\u3005: \"pinch\",\n  \u3072\u3068\u3064\u307E\u307F: \"pinch\",\n  \u3064\u307E\u307F: \"pinch\",\n  pinch: \"pinch\",\n};\n\nexport const unitDisplayJa: Record<CanonicalUnit, string> = {\n  g: \"g\",\n  kg: \"kg\",\n  mg: \"mg\",\n  ml: \"ml\",\n  l: \"l\",\n  tsp: \"\u5C0F\u3055\u3058\",\n  tbsp: \"\u5927\u3055\u3058\",\n  cup: \"\u30AB\u30C3\u30D7\",\n  go: \"\u5408\",\n  cm: \"cm\",\n  serving: \"\u4EBA\",\n  piece: \"\u500B\",\n  slice: \"\u679A\",\n  block: \"\u4E01\",\n  stalk: \"\u672C\",\n  leaf: \"\u679A\",\n  clove: \"\u7247\",\n  can: \"\u7F36\",\n  pinch: \"\u5C11\u3005\",\n  pack: \"\u30D1\u30C3\u30AF\",\n  bag: \"\u888B\",\n  bunch: \"\u675F\",\n  head: \"\u682A\",\n  tail: \"\u5C3E\",\n  grain: \"\u7C92\",\n  unknown: \"\",\n};\n\nexport const nonScalableKeywords = [\n  \"\u9069\u91CF\",\n  \"\u5C11\u3005\",\n  \"\u304A\u597D\u307F\u3067\",\n  \"\u597D\u307F\u3067\",\n  \"\u304A\u597D\u307F\u306E\u91CF\",\n  \"\u4F5C\u308A\u3084\u3059\u3044\u91CF\",\n  \"\u4F5C\u308A\u3084\u3059\u3044\u5206\u91CF\",\n  \"\u5FC5\u8981\u91CF\",\n  \"\u5C11\u91CF\",\n  \"\u3072\u3068\u3064\u304B\u307F\",\n  \"\u3075\u305F\u3064\u304B\u307F\",\n  \"\u5473\u3092\u898B\u3066\",\n  \"to taste\",\n  \"as needed\",\n  \"as necessary\",\n  \"\u9069\u5B9C\",\n  \"\u5C71\u76DB\u308A\",\n  \"\u305F\u3063\u3077\u308A\",\n  \"\u3072\u305F\u3072\u305F\",\n];\n\n// ========= \u4E8B\u524D\u30B3\u30F3\u30D1\u30A4\u30EB\u30FB\u4E8B\u524D\u8A08\u7B97 =========\nexport const escapeRegExp = (s: string) =>\n  s.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\");\nexport const NON_SCALABLE_REGEX = new RegExp(\n  `(?:${nonScalableKeywords.map(escapeRegExp).join(\"|\")})`\n);\n\n// \u6570\u5024\u8868\u73FE\uFF08\u5206\u6570\u30FB\u7BC4\u56F2\u3092\u542B\u3080\uFF09\nexport const NUMBER_PATTERN =\n  /(\\d+(?:\\.\\d+)?(?:[\\/\uFF0F]\\d+)?(?:\\s*[\u301C\uFF5E~-]\\s*\\d+(?:\\.\\d+)?(?:[\\/\uFF0F]\\d+)?)?)/g;\n\n// \u5358\u4F4D\u62BD\u51FA\u306E\u9AD8\u901F\u5316: \u9577\u3044\u30AD\u30FC\u9806\nexport const SORTED_UNIT_ENTRIES: Array<[string, CanonicalUnit]> =\n  Object.entries(unitMap)\n    .map(([k, v]) => [k.toLowerCase(), v] as [string, CanonicalUnit])\n    .sort(([a], [b]) => b.length - a.length);\n\n// ========= Utilities =========\nexport function normalizeNumerals(text: string): string {\n  let s = text\n    .replace(/[\uFF10-\uFF19]/g, (d) => String.fromCharCode(d.charCodeAt(0) - 0xfee0))\n    .replace(/[\uFF21-\uFF3A\uFF41-\uFF5A]/g, (ch) =>\n      String.fromCharCode(ch.charCodeAt(0) - 0xfee0)\n    )\n    .replace(/\u4E00/g, \"1\")\n    .replace(/\u4E8C/g, \"2\")\n    .replace(/\u4E09/g, \"3\")\n    .replace(/\u56DB/g, \"4\")\n    .replace(/\u4E94/g, \"5\")\n    .replace(/\u516D/g, \"6\")\n    .replace(/\u4E03/g, \"7\")\n    .replace(/\u516B/g, \"8\")\n    .replace(/\u4E5D/g, \"9\")\n    .replace(/\u5341/g, \"10\");\n  s = s.replace(/\u534A\u5206?/g, \"1/2\");\n  // \u307E\u305A\u300C\u3064\u307E\u307F\u300D\u7CFB\u3092\u512A\u5148\u7684\u306B\u6570\u5024\u5316\uFF08\u4ED6\u306E\u7F6E\u63DB\u3067\u58CA\u3055\u306A\u3044\u3088\u3046\u306B\u9806\u5E8F\u3092\u65E9\u3081\u308B\uFF09\n  s = s\n    .replace(/\u3072\u3068\u3064\u307E\u307F/g, \"1\u3064\u307E\u307F\")\n    .replace(/\u3075\u305F\u3064\u307E\u307F/g, \"2\u3064\u307E\u307F\")\n    .replace(/\u4E00\u3064\u307E\u307F/g, \"1\u3064\u307E\u307F\")\n    .replace(/\u4E8C\u3064\u307E\u307F/g, \"2\u3064\u307E\u307F\");\n  // \u4E00\u822C\u7684\u306A\u548C\u6570 -> \u30A2\u30E9\u30D3\u30A2\u6570\u5B57\n  s = s\n    .replace(/\u3072\u3068\u3064/g, \"1\")\n    .replace(/\u3075\u305F\u3064/g, \"2\")\n    .replace(/\u307F\u3063\u3064/g, \"3\")\n    .replace(/\u3088\u3063\u3064/g, \"4\")\n    .replace(/\u3044\u3064\u3064/g, \"5\")\n    .replace(/\u3080\u3063\u3064/g, \"6\")\n    .replace(/\u306A\u306A\u3064/g, \"7\")\n    .replace(/\u3084\u3063\u3064/g, \"8\")\n    .replace(/\u3053\u3053\u306E\u3064/g, \"9\")\n    .replace(/\u3068\u304A/g, \"10\");\n  s = s.replace(/(\\d+)\\s*\u3068\\s*(\\d+\\s*\\/\\s*\\d+)/g, \"$1 $2\");\n  s = s.replace(/(\\d+)\\s*[\u30FB\u30FB]\\s*(\\d+\\s*\\/\\s*\\d+)/g, \"$1 $2\");\n  // \u8A18\u53F7\u30FB\u5358\u4F4D\u306E\u6B63\u898F\u5316\n  s = s.replace(/\u339D/g, \"cm\");\n  s = s.replace(/\u3396/g, \"ml\");\n  // \u300C\u59271\u300D\u2192\u300C1 \u5927\u300D\u3078\u306E\u4E26\u3079\u66FF\u3048\u306F\u884C\u308F\u306A\u3044\uFF08\u300C\u59271\u500B\u300D\u3092\u8AA4\u3063\u3066\u5927\u3055\u3058\u306B\u89E3\u91C8\u3057\u306A\u3044\u305F\u3081\uFF09\n  return s;\n}\n\nexport function stripAndCollectParentheticals(text: string): {\n  stripped: string;\n  parens: string[];\n  parensInner: string[];\n} {\n  const parens: string[] = [];\n  const parensInner: string[] = [];\n  let work = text;\n  work = work.replace(/\uFF08[^\uFF09]*\uFF09/g, (m) => {\n    parens.push(m);\n    parensInner.push(m.slice(1, -1));\n    return \" \";\n  });\n  work = work.replace(/\\([^)]*\\)/g, (m) => {\n    parens.push(m);\n    parensInner.push(m.slice(1, -1));\n    return \" \";\n  });\n  return { stripped: work, parens, parensInner };\n}\n\nexport function toArray<T>(x: T | T[] | undefined | null): T[] {\n  if (!x) return [];\n  return Array.isArray(x) ? x : [x];\n}\n\nexport function equalsIgnoreCase(a: string, b: string): boolean {\n  return a?.toLowerCase?.() === b?.toLowerCase?.();\n}\n\nexport function checkNonScalableKeywords(\n  text: string\n): { keyword: string; match: string } | undefined {\n  const m = text.match(NON_SCALABLE_REGEX);\n  if (!m) return undefined;\n  const matched = m[0];\n  return { keyword: matched, match: matched };\n}\n\nexport function parseNumber(numStr: string): number | undefined {\n  if (numStr.includes(\"/\") || numStr.includes(\"\uFF0F\")) {\n    const parts = numStr.split(/[\\/\uFF0F]/);\n    if (parts.length === 2) {\n      const num = parseFloat(parts[0]);\n      const den = parseFloat(parts[1]);\n      if (!isNaN(num) && !isNaN(den) && den !== 0) {\n        return num / den;\n      }\n    }\n  }\n  const num = parseFloat(numStr);\n  return isNaN(num) ? undefined : num;\n}\n\nexport function cleanIngredientName(\n  nameWork: string,\n  originalLine: string\n): string {\n  let cleaned = nameWork.replace(/\\s+/g, \" \").trim();\n\n  // \u30D6\u30EC\u30C3\u30C8\u30DD\u30A4\u30F3\u30C8\u8A18\u53F7\u3092\u9664\u53BB\n  cleaned = cleaned.replace(/^[\u30FB\u2022\\-\\*\\+\u2605\u2606]\\s*/, \"\");\n\n  // \u672B\u5C3E\u306E\u300C\uFF1A\u300D\u3082\u9664\u53BB\uFF08\u6750\u6599\u540D\u306B\u542B\u307E\u308C\u3066\u3057\u307E\u3063\u305F\u5834\u5408\uFF09\n  cleaned = cleaned.replace(/\uFF1A$/, \"\");\n\n  if (!cleaned || cleaned.length < 2) {\n    const words = originalLine.split(/\\s+/);\n    cleaned = words.find((w) => w.length >= 2 && !/\\d/.test(w)) || originalLine;\n    // \u898B\u3064\u3051\u305F\u5358\u8A9E\u304B\u3089\u3082\u30D6\u30EC\u30C3\u30C8\u30DD\u30A4\u30F3\u30C8\u8A18\u53F7\u3092\u9664\u53BB\n    cleaned = cleaned.replace(/^[\u30FB\u2022\\-\\*\\+\u2605\u2606]\\s*/, \"\").replace(/\uFF1A$/, \"\");\n  }\n  return cleaned;\n}\n\n// \u5171\u901A\u30B9\u30B1\u30FC\u30EA\u30F3\u30B0\u7528\u306E\u4E38\u3081\nexport function roundForUnit(value: number, unit?: CanonicalUnit): number {\n  if (!unit || unit === \"unknown\") return Math.round(value * 100) / 100;\n  switch (unit) {\n    case \"tsp\":\n    case \"tbsp\":\n    case \"cup\": {\n      return Math.round(value * 4) / 4;\n    }\n    case \"piece\":\n    case \"slice\":\n    case \"block\":\n    case \"stalk\":\n    case \"leaf\":\n    case \"clove\":\n    case \"can\": {\n      // \u5206\u6570\u8868\u793A\u3092\u3057\u306A\u3044\u30DD\u30EA\u30B7\u30FC\u306B\u5408\u308F\u305B\u30010.1\u523B\u307F\u3067\u4E38\u3081\n      return Math.round(value * 10) / 10;\n    }\n    case \"pinch\":\n      return value;\n    default:\n      return Math.round(value * 10) / 10;\n  }\n}\n", "/*\n  Parsing of JSON-LD recipes and ingredient lines\n*/\nimport {\n  CanonicalUnit,\n  checkNonScalableKeywords,\n  cleanIngredientName,\n  equalsIgnoreCase,\n  NormalizedIngredient,\n  NormalizedInstruction,\n  NormalizedRecipe,\n  NormalizedYield,\n  normalizeNumerals,\n  NUMBER_PATTERN,\n  parseNumber,\n  SORTED_UNIT_ENTRIES,\n  stripAndCollectParentheticals,\n  toArray,\n  unitDisplayJa,\n  unitMap,\n} from \"./core.js\";\n\nexport function parseJsonLdRecipesFromScripts(scripts: string[]): any[] {\n  const recipes: any[] = [];\n  for (const text of scripts) {\n    try {\n      const data = JSON.parse(text);\n      const nodes = Array.isArray(data) ? data : [data];\n      for (const node of nodes) {\n        collectRecipes(node, recipes);\n      }\n    } catch {\n      // ignore malformed JSON-LD\n    }\n  }\n  return recipes;\n}\n\nfunction collectRecipes(node: any, acc: any[]) {\n  if (!node || typeof node !== \"object\") return;\n  const types: string[] = toArray(node[\"@type\"]).map(String);\n  if (types.some((t) => equalsIgnoreCase(t, \"Recipe\"))) {\n    acc.push(node);\n  }\n  if (Array.isArray(node[\"@graph\"])) {\n    for (const n of node[\"@graph\"]) collectRecipes(n, acc);\n  }\n  for (const key of Object.keys(node)) {\n    const val = (node as any)[key];\n    if (val && typeof val === \"object\") collectRecipes(val, acc);\n  }\n}\n\nexport function normalizeRecipe(raw: any): NormalizedRecipe {\n  const name: string | undefined = raw.name || raw.headline || undefined;\n  const imageUrl = extractImageUrl(raw.image);\n  const author = typeof raw.author === \"string\" ? raw.author : raw.author?.name;\n  const yieldText: string | undefined = raw.recipeYield\n    ? Array.isArray(raw.recipeYield)\n      ? raw.recipeYield.join(\", \")\n      : String(raw.recipeYield)\n    : undefined;\n  const baseServings = (() => {\n    const y = parseRecipeYield(yieldText);\n    if (!y) return 2;\n    if (y.unit === \"serving\") {\n      if (y.quantity != null) return y.quantity;\n      if (y.quantityRange)\n        return Math.round((y.quantityRange.min + y.quantityRange.max) / 2);\n    }\n    return 2;\n  })();\n\n  const ingredientsRaw: string[] = toArray(raw.recipeIngredient)\n    .map(String)\n    .filter(Boolean);\n  const ingredients = ingredientsRaw.map(parseIngredientLine);\n\n  const instructions = normalizeInstructions(raw.recipeInstructions);\n\n  const times = {\n    prep: raw.prepTime,\n    cook: raw.cookTime,\n    total: raw.totalTime,\n  };\n\n  const nutrition = normalizeNutrition(raw.nutrition);\n\n  return {\n    name,\n    imageUrl,\n    author,\n    yieldText,\n    baseServings,\n    ingredients,\n    instructions,\n    times,\n    nutrition,\n  };\n}\n\nfunction extractImageUrl(imageField: any): string | undefined {\n  if (!imageField) return undefined;\n  if (typeof imageField === \"string\") return imageField;\n  if (Array.isArray(imageField)) {\n    const s = imageField.find((v) => typeof v === \"string\");\n    if (s) return s;\n    const o = imageField.find((v) => typeof v === \"object\" && v.url);\n    return o?.url;\n  }\n  if (typeof imageField === \"object\")\n    return imageField.url || imageField[\"@id\"];\n  return undefined;\n}\n\n// ========= Yield parsing =========\nfunction stripDecorations(text: string): string {\n  // \u300A \u300B \u300C \u300D \u300E \u300F \u3010 \u3011 \u3092\u9664\u53BB\n  return text.replace(/[\u300A\u300B\u300C\u300D\u300E\u300F\u3010\u3011]/g, \"\");\n}\n\nfunction parseRangeOrNumber(numStr: string): {\n  q?: number;\n  r?: { min: number; max: number };\n} {\n  if (/[\u301C\uFF5E-]/.test(numStr)) {\n    const parts = numStr.split(/[\u301C\uFF5E-]/);\n    if (parts.length === 2) {\n      const a = parseNumber(parts[0].trim());\n      const b = parseNumber(parts[1].trim());\n      if (a != null && b != null) {\n        return {\n          r: { min: Math.min(a, b), max: Math.max(a, b) },\n          q: (a + b) / 2,\n        };\n      }\n    }\n  }\n  const q = parseNumber(numStr);\n  return { q };\n}\n\nexport function parseRecipeYield(text?: string): NormalizedYield | undefined {\n  if (!text) return undefined;\n  const original = String(text).trim();\n  if (!original) return undefined;\n\n  // Normalize numerals and basic symbols\n  const normalized = normalizeNumerals(stripDecorations(original));\n\n  // Check unscalable words first\n  const non = checkNonScalableKeywords(normalized);\n  if (non) {\n    return {\n      originalText: original,\n      scalable: false,\n    } as NormalizedYield;\n  }\n\n  // Remove parentheticals but keep inner for secondary\n  const { stripped, parensInner, parens } =\n    stripAndCollectParentheticals(normalized);\n  const work = stripped.trim();\n\n  // 1) Prefer explicit \"\u4EBA\" expressions\n  const personMatch = work.match(\n    /(\\d+(?:\\.\\d+)?(?:\\s*[\u301C\uFF5E-]\\s*\\d+(?:\\.\\d+)?)?)\\s*\u4EBA(\u5206|\u524D)?/i\n  );\n  if (personMatch) {\n    const numStr = personMatch[1];\n    const { q, r } = parseRangeOrNumber(numStr);\n\n    // Derive prefix from original (before first digit occurrence of this match)\n    const beforeIdx = normalized.indexOf(numStr);\n    const prefix =\n      beforeIdx > 0\n        ? normalized.slice(0, beforeIdx).trim() || undefined\n        : undefined;\n\n    const out: NormalizedYield = {\n      originalText: original,\n      quantity: r ? undefined : q,\n      quantityRange: r,\n      unit: \"serving\",\n      unitText: unitDisplayJa[\"serving\"],\n      prefix,\n      suffix: personMatch[2] || undefined,\n      scalable: true,\n    };\n\n    // Secondary from parentheses (e.g., 2\u4EBA\u5206(4\u500B)).\n    // \u305F\u3060\u3057\u3001\u30B5\u30A4\u30BA\u6307\u5B9A\u306A\u3069 (cm \u306A\u3069) \u306F prefix \u5074\u306B\u623B\u3059\u3002\n    const keptParens: string[] = [];\n    for (let i = 0; i < parensInner.length; i++) {\n      const inner = parensInner[i];\n      const full = parens[i];\n      const alt = parseQuantityExpression(inner);\n      const allowedSecondaryUnits: CanonicalUnit[] = [\"piece\", \"slice\", \"cup\"];\n      if (\n        alt.hasNumber &&\n        alt.unit &&\n        allowedSecondaryUnits.includes(alt.unit)\n      ) {\n        out.secondaryQuantity = alt.quantity;\n        out.secondaryQuantityRange = alt.quantityRange;\n        out.secondaryUnit = alt.unit;\n        out.secondaryUnitText = alt.unitText;\n        out.secondaryPrefix = alt.prefix;\n        out.secondarySuffix = alt.suffix;\n        // 1\u3064\u898B\u3064\u3051\u305F\u3089\u5341\u5206\n        continue;\n      }\n      keptParens.push(full);\n    }\n    if (keptParens.length) {\n      out.prefix =\n        [out.prefix, keptParens.join(\" \")].filter(Boolean).join(\"\").trim() ||\n        undefined;\n    }\n    return out;\n  }\n\n  // 2) \u6570\u5024\u30C8\u30FC\u30AF\u30F3\u306E\u3046\u3061\u3001\u6700\u5F8C\u306E\u3082\u306E\u3092\u512A\u5148\u3057\u3001\u524D\u5F8C\u306E\u5358\u4F4D\u691C\u51FA\uFF08Ingredient \u3068\u540C\u3058\u62BD\u51FA\u5668\uFF09\n  const matches = Array.from(work.matchAll(NUMBER_PATTERN));\n  if (matches.length > 0) {\n    type Candidate = {\n      m: RegExpMatchArray;\n      idx: number;\n      beforeLower: string;\n      afterLower: string;\n      unitMatch?: {\n        unit: CanonicalUnit;\n        unitText: string;\n        matched: string;\n        side: \"before\" | \"after\";\n      };\n    };\n    const candidates: Candidate[] = matches.map((m) => {\n      const idx = m.index || 0;\n      const before = work.slice(0, idx).trim().toLowerCase();\n      const after = work\n        .slice(idx + m[0].length)\n        .trim()\n        .toLowerCase();\n      const unitMatch = extractUnitAdjacent(before, after);\n      return { m, idx, beforeLower: before, afterLower: after, unitMatch };\n    });\n\n    const withUnit = candidates.filter((c) => c.unitMatch);\n    const chosen = (withUnit.length ? withUnit : candidates).slice(-1)[0]!;\n    const numStr = chosen.m[1];\n    const { q, r } = parseRangeOrNumber(numStr);\n\n    let unit: CanonicalUnit | undefined = chosen.unitMatch?.unit;\n    let unitText: string | undefined = chosen.unitMatch?.matched;\n    let suffix: string | undefined;\n    if (chosen.unitMatch && chosen.unitMatch.side === \"after\") {\n      const rest = work\n        .slice(chosen.idx + chosen.m[0].length)\n        .trim()\n        .slice(chosen.unitMatch.matched.length);\n      const sm = rest.match(/^([\u4E00-\u9FAF\u3041-\u3094\u30A1-\u30F4\u30FCa-zA-Z]+)/);\n      if (sm && sm[1]) suffix = sm[1];\n    }\n\n    const beforeWork = work.slice(0, chosen.idx).trim();\n    let prefix = beforeWork ? beforeWork : undefined;\n    // \u5358\u4F4D\u304C\u524D\u5074\u306B\u6765\u3066\u3044\u308B\u5834\u5408\u3001prefix \u304B\u3089\u5358\u4F4D\u6587\u5B57\u5217\u3092\u5265\u304C\u3059\n    if (chosen.unitMatch && chosen.unitMatch.side === \"before\" && prefix) {\n      const rawTrim = prefix;\n      if (rawTrim.toLowerCase().endsWith(chosen.unitMatch.matched)) {\n        prefix =\n          rawTrim\n            .slice(0, rawTrim.length - chosen.unitMatch.matched.length)\n            .trim() || undefined;\n      }\n    }\n\n    const out: NormalizedYield = {\n      originalText: original,\n      quantity: r ? undefined : q,\n      quantityRange: r,\n      unit,\n      unitText,\n      prefix,\n      suffix,\n      scalable: q != null || !!r,\n    };\n\n    // \u30EB\u30FC\u30EB: \u6570\u5B57\u3057\u304B\u306A\u3044\u5834\u5408\u306F \u4EBA\u5206 \u3068\u3059\u308B\n    if ((out.quantity != null || out.quantityRange) && !out.unit) {\n      out.unit = \"serving\";\n      out.unitText = unitDisplayJa[\"serving\"];\n      out.suffix = out.suffix ?? \"\u5206\";\n      out.scalable = true;\n    }\n\n    // Secondary from parentheses\uFF08\u30B5\u30A4\u30BA\u6307\u5B9A\u306A\u3069\u306F prefix \u5074\u3078\u623B\u3059\uFF09\n    const keptParens: string[] = [];\n    for (let i = 0; i < parensInner.length; i++) {\n      const inner = parensInner[i];\n      const full = parens[i];\n      const alt = parseQuantityExpression(inner);\n      const allowedSecondaryUnits: CanonicalUnit[] = [\"piece\", \"slice\", \"cup\"];\n      if (\n        alt.hasNumber &&\n        alt.unit &&\n        allowedSecondaryUnits.includes(alt.unit)\n      ) {\n        out.secondaryQuantity = alt.quantity;\n        out.secondaryQuantityRange = alt.quantityRange;\n        out.secondaryUnit = alt.unit;\n        out.secondaryUnitText = alt.unitText;\n        out.secondaryPrefix = alt.prefix;\n        out.secondarySuffix = alt.suffix;\n        continue;\n      }\n      keptParens.push(full);\n    }\n    if (keptParens.length) {\n      out.prefix =\n        [out.prefix, keptParens.join(\" \")].filter(Boolean).join(\"\").trim() ||\n        undefined;\n    }\n    return out;\n  }\n\n  // 3) English fallbacks (servings)\n  const t = work.toLowerCase();\n  const m2 = t.match(/serv(e|ing)s?\\s*(\\d+(?:\\.\\d+)?)/);\n  if (m2) {\n    return {\n      originalText: original,\n      quantity: Number(m2[2]),\n      unit: \"serving\",\n      unitText: unitDisplayJa[\"serving\"],\n      scalable: true,\n    };\n  }\n  const m3 = t.match(/for\\s*(\\d+(?:\\.\\d+)?)\\s*(people|persons|servings?)/);\n  if (m3) {\n    return {\n      originalText: original,\n      quantity: Number(m3[1]),\n      unit: \"serving\",\n      unitText: unitDisplayJa[\"serving\"],\n      scalable: true,\n    };\n  }\n\n  // Nothing parseable\n  return {\n    originalText: original,\n    scalable: false,\n  } as NormalizedYield;\n}\n\nfunction normalizeInstructions(instr: any): NormalizedInstruction[] {\n  if (!instr) return [];\n  if (typeof instr === \"string\") {\n    return [{ text: instr.trim() }].filter((i) => i.text);\n  }\n  if (Array.isArray(instr)) {\n    const res: NormalizedInstruction[] = [];\n    for (const step of instr) {\n      if (!step) continue;\n      if (typeof step === \"string\") {\n        res.push({ text: step.trim() });\n      } else if (typeof step === \"object\") {\n        const instruction: NormalizedInstruction = {\n          text: \"\",\n        };\n\n        // text\u30D5\u30A3\u30FC\u30EB\u30C9\u3092\u512A\u5148\n        if (typeof step.text === \"string\") {\n          instruction.text = step.text.trim();\n        } else if (typeof step.name === \"string\") {\n          instruction.text = step.name.trim();\n        }\n\n        // \u753B\u50CFURL\u3092\u62BD\u51FA\n        if (step.image) {\n          instruction.imageUrl = extractImageUrl(step.image);\n        }\n\n        // \u305D\u306E\u4ED6\u306E\u30E1\u30BF\u30C7\u30FC\u30BF\n        if (typeof step.name === \"string\" && step.name !== instruction.text) {\n          instruction.name = step.name.trim();\n        }\n        if (typeof step.url === \"string\") {\n          instruction.url = step.url;\n        }\n\n        if (instruction.text) {\n          res.push(instruction);\n        }\n      }\n    }\n    return res.filter((i) => i.text);\n  }\n  if (typeof instr === \"object\") {\n    if (typeof instr.text === \"string\") {\n      const instruction: NormalizedInstruction = { text: instr.text.trim() };\n      if (instr.image) {\n        instruction.imageUrl = extractImageUrl(instr.image);\n      }\n      if (typeof instr.name === \"string\") {\n        instruction.name = instr.name.trim();\n      }\n      if (typeof instr.url === \"string\") {\n        instruction.url = instr.url;\n      }\n      return [instruction];\n    }\n    if (Array.isArray(instr.itemListElement)) {\n      return normalizeInstructions(instr.itemListElement);\n    }\n  }\n  return [];\n}\n\nfunction normalizeNutrition(n: any): Record<string, string> | undefined {\n  if (!n || typeof n !== \"object\") return undefined;\n  const out: Record<string, string> = {};\n  for (const k of Object.keys(n)) {\n    const v = n[k];\n    if (v == null) continue;\n    const s = typeof v === \"string\" ? v : String(v);\n    out[k] = s;\n  }\n  return Object.keys(out).length ? out : undefined;\n}\n\n// ========= Ingredient line parsing =========\n\nfunction extractSecondaryFromParens(\n  parensInner: string[],\n  allowedUnits?: CanonicalUnit[]\n):\n  | {\n      quantity?: number;\n      quantityRange?: { min: number; max: number };\n      unit?: CanonicalUnit;\n      unitText?: string;\n      prefix?: string;\n      suffix?: string;\n    }\n  | undefined {\n  for (const inner of parensInner) {\n    const alt = parseQuantityExpression(inner);\n    if (alt.hasNumber) {\n      if (allowedUnits && alt.unit && !allowedUnits.includes(alt.unit)) {\n        continue;\n      }\n      return {\n        quantity: alt.quantity,\n        quantityRange: alt.quantityRange,\n        unit: alt.unit,\n        unitText: alt.unitText,\n        prefix: alt.prefix,\n        suffix: alt.suffix,\n      };\n    }\n  }\n  return undefined;\n}\n\nexport function parseIngredientLine(line: string): NormalizedIngredient {\n  const original = line.trim();\n  const spaceSplit = original.split(/[\\s\u3000]+/);\n  if (spaceSplit.length === 2) {\n    const result = tryParseIngredientQuantity(\n      spaceSplit[0],\n      spaceSplit[1],\n      original\n    );\n    if (result) return result;\n  }\n  return parseComplexIngredientLine(original);\n}\n\nfunction tryParseIngredientQuantity(\n  ingredient: string,\n  quantityStr: string,\n  originalLine: string\n): NormalizedIngredient | null {\n  const normRaw = normalizeNumerals(quantityStr);\n  const { stripped, parensInner, parens } = ((): any => {\n    const r = stripAndCollectParentheticals(normRaw);\n    return r as any;\n  })();\n  const quantityInfo = parseQuantityExpression(stripped);\n  let primaryFromParens:\n    | {\n        quantity?: number;\n        quantityRange?: { min: number; max: number };\n        unit?: CanonicalUnit;\n        unitText?: string;\n        prefix?: string;\n        suffix?: string;\n      }\n    | undefined;\n  let secondary = extractSecondaryFromParens(parensInner);\n  if (!quantityInfo.hasNumber && secondary) {\n    primaryFromParens = secondary;\n    secondary = undefined;\n  }\n  // \u6570\u91CF\u3068\u3057\u3066\u89E3\u91C8\u3067\u304D\u306A\u3044\u62EC\u5F27\u306F suffix \u306B\u6B8B\u3059\n  let parenNoteSuffix: string | undefined;\n  if (!secondary && parens && parens.length) {\n    const note = parens.join(\" \").trim();\n    if (note) parenNoteSuffix = note;\n  }\n\n  if (!quantityInfo.hasNumber && !quantityInfo.isNonScalable) {\n    return null;\n  }\n\n  return {\n    originalText: originalLine,\n    name: ingredient,\n    quantity: primaryFromParens?.quantity ?? quantityInfo.quantity,\n    quantityRange:\n      primaryFromParens?.quantityRange ?? quantityInfo.quantityRange,\n    unit: primaryFromParens?.unit ?? quantityInfo.unit,\n    unitText: primaryFromParens?.unitText ?? quantityInfo.unitText,\n    prefix: primaryFromParens?.prefix ?? quantityInfo.prefix,\n    suffix:\n      [quantityInfo.suffix, parenNoteSuffix].filter(Boolean).join(\"\") ||\n      undefined,\n    secondaryQuantity: secondary?.quantity,\n    secondaryQuantityRange: secondary?.quantityRange,\n    secondaryUnit: secondary?.unit,\n    secondaryUnitText: secondary?.unitText,\n    secondaryPrefix: secondary?.prefix,\n    secondarySuffix: secondary?.suffix,\n    scalable: primaryFromParens != null || !quantityInfo.isNonScalable,\n  };\n}\n\nfunction parseComplexIngredientLine(line: string): NormalizedIngredient {\n  const original = line.trim();\n  let work = normalizeNumerals(original);\n\n  const { stripped: workNoParens, parensInner } =\n    stripAndCollectParentheticals(work);\n  work = workNoParens;\n\n  const quantityInfo = parseQuantityExpression(work);\n\n  let nameWork = work;\n  if (quantityInfo.originalExpression) {\n    nameWork = nameWork.replace(quantityInfo.originalExpression, \" \");\n  }\n\n  if (quantityInfo.unit) {\n    for (const [unitStr, canonicalUnit] of Object.entries(unitMap)) {\n      if (canonicalUnit === quantityInfo.unit) {\n        nameWork = nameWork.replace(new RegExp(`\\\\b${unitStr}\\\\b`, \"g\"), \" \");\n      }\n    }\n  }\n\n  const name = cleanIngredientName(nameWork, original);\n\n  let primaryFromParens:\n    | {\n        quantity?: number;\n        quantityRange?: { min: number; max: number };\n        unit?: CanonicalUnit;\n        unitText?: string;\n        prefix?: string;\n        suffix?: string;\n      }\n    | undefined;\n  let secondary:\n    | {\n        quantity?: number;\n        quantityRange?: { min: number; max: number };\n        unit?: CanonicalUnit;\n        unitText?: string;\n        prefix?: string;\n        suffix?: string;\n      }\n    | undefined = extractSecondaryFromParens(parensInner);\n  if (!quantityInfo.hasNumber && secondary) {\n    primaryFromParens = secondary;\n    secondary = undefined;\n  }\n  // \u975E\u6570\u5024\u306E\u62EC\u5F27\u306F suffix \u306B\u6B8B\u3059\n  let parenNoteSuffix: string | undefined;\n  if (!secondary) {\n    const removed = stripAndCollectParentheticals(line);\n    if (removed.parens && removed.parens.length) {\n      parenNoteSuffix = removed.parens.join(\" \");\n    }\n  }\n\n  return {\n    originalText: original,\n    name,\n    quantity: primaryFromParens?.quantity ?? quantityInfo.quantity,\n    quantityRange:\n      primaryFromParens?.quantityRange ?? quantityInfo.quantityRange,\n    unit: primaryFromParens?.unit ?? quantityInfo.unit,\n    unitText: primaryFromParens?.unitText ?? quantityInfo.unitText,\n    prefix: primaryFromParens?.prefix ?? quantityInfo.prefix,\n    suffix:\n      [quantityInfo.suffix, parenNoteSuffix].filter(Boolean).join(\"\") ||\n      undefined,\n    secondaryQuantity: secondary?.quantity,\n    secondaryQuantityRange: secondary?.quantityRange,\n    secondaryUnit: secondary?.unit,\n    secondaryUnitText: secondary?.unitText,\n    secondaryPrefix: secondary?.prefix,\n    secondarySuffix: secondary?.suffix,\n    scalable: primaryFromParens != null || !quantityInfo.isNonScalable,\n  };\n}\n\ninterface QuantityInfo {\n  quantity?: number;\n  quantityRange?: { min: number; max: number };\n  unit?: CanonicalUnit;\n  unitText?: string;\n  prefix?: string;\n  suffix?: string;\n  hasNumber: boolean;\n  isNonScalable: boolean;\n  originalExpression?: string;\n}\n\nexport function parseQuantityExpression(text: string): QuantityInfo {\n  const nonScalableMatch = checkNonScalableKeywords(text);\n  if (nonScalableMatch) {\n    return {\n      hasNumber: false,\n      isNonScalable: true,\n      prefix: undefined,\n      // \u975E\u30B9\u30B1\u30FC\u30EB\u8A9E\u81EA\u4F53\u3092\u8868\u793A\u306B\u6B8B\u3059\n      suffix: nonScalableMatch.match,\n      originalExpression: nonScalableMatch.match,\n    } as QuantityInfo;\n  }\n\n  // \"1 \u3068 1/2\" \u3084 \"1 1/2\" \u3092\u5408\u7B97\u5C0F\u6570\u3078\n  const preNormalized = text.replace(\n    /(\\d+)\\s*(?:\u3068)?\\s*(\\d+[\\/\uFF0F]\\d+)/g,\n    (_m, a: string, frac: string) => {\n      const fv = parseNumber(frac);\n      if (fv == null) return `${a} ${frac}`;\n      return String(Number(a) + fv);\n    }\n  );\n\n  let quantity: number | undefined;\n  let quantityRange: { min: number; max: number } | undefined;\n  let unit: CanonicalUnit | undefined;\n  let unitText: string | undefined;\n  let prefix: string | undefined;\n  let suffix: string | undefined;\n  let originalExpression: string | undefined;\n\n  const numberMatches = Array.from(preNormalized.matchAll(NUMBER_PATTERN));\n\n  if (numberMatches.length > 0) {\n    const numberMatch = numberMatches[0];\n    originalExpression = numberMatch[0];\n\n    const numberStr = numberMatch[1];\n    const cleanNum = numberStr.replace(/[\\/\uFF0F\u301C\uFF5E~-].*/, \"\");\n    if (cleanNum.length >= 5) {\n      return {\n        hasNumber: false,\n        isNonScalable: true,\n      };\n    }\n\n    if (/[\u301C\uFF5E~-]/.test(numberStr)) {\n      const rangeParts = numberStr.split(/[\u301C\uFF5E~-]/);\n      if (rangeParts.length === 2) {\n        const min = parseNumber(rangeParts[0].trim());\n        const max = parseNumber(rangeParts[1].trim());\n        if (min !== undefined && max !== undefined) {\n          quantityRange = { min: Math.min(min, max), max: Math.max(min, max) };\n          quantity = (min + max) / 2;\n        }\n      }\n    } else {\n      quantity = parseNumber(numberStr);\n    }\n\n    const beforeNumber = preNormalized.substring(0, numberMatch.index || 0);\n    const afterNumber = preNormalized.substring(\n      (numberMatch.index || 0) + numberMatch[0].length\n    );\n\n    const beforeLower = beforeNumber.trim().toLowerCase();\n    const afterLower = afterNumber.trim().toLowerCase();\n    let unitMatch = extractUnitAdjacent(beforeLower, afterLower);\n    if (!unitMatch) {\n      const fallback =\n        extractUnit(beforeNumber + \" \" + afterNumber) ||\n        extractUnit(preNormalized);\n      if (fallback) {\n        unitMatch = { ...fallback, matched: fallback.unitText, side: \"after\" };\n      }\n    }\n    if (unitMatch) {\n      unit = unitMatch.unit;\n      unitText = unitMatch.unitText;\n      if (unitMatch.side === \"after\") {\n        const afterTrim = afterNumber.trim();\n        const rest = afterTrim.slice(unitMatch.matched.length).trim();\n        // \u5358\u4F4D\u76F4\u5F8C\u306E\u300C\u301C\u304A\u597D\u307F\u3067\u300D\u7B49\u3082 suffix \u306B\u53D6\u308A\u8FBC\u3080\n        const m = rest.match(/^([\u301C\uFF5E-]?[\u4E00-\u9FAF\u3041-\u3094\u30A1-\u30F4\u30FCa-zA-Z]+(?:\u3067)?)?/);\n        if (m && m[0]) suffix = m[0].trim() || undefined;\n      }\n    }\n\n    if (\n      quantity !== undefined &&\n      !quantityRange &&\n      /[\u301C\uFF5E~-]/.test(afterNumber)\n    ) {\n      const m = afterNumber.match(/[\u301C\uFF5E~-]\\s*(\\d+(?:\\.\\d+)?(?:[\\/\uFF0F]\\d+)?)/);\n      if (m) {\n        const nextVal = parseNumber(m[1]);\n        if (nextVal !== undefined) {\n          const minV = Math.min(quantity, nextVal);\n          const maxV = Math.max(quantity, nextVal);\n          quantityRange = { min: minV, max: maxV };\n          quantity = (minV + maxV) / 2;\n        }\n      }\n    }\n\n    const beforeRaw = beforeNumber;\n    if (beforeRaw && /\\S$/.test(beforeRaw)) {\n      // \u5358\u4F4D\u304C\u6570\u5024\u306E\u524D\u5074\u306B\u30DE\u30C3\u30C1\u3057\u3066\u3044\u308B\u5834\u5408\u3001prefix \u304B\u3089\u305D\u306E\u5358\u4F4D\u6587\u5B57\u3092\u9664\u53BB\u3059\u308B\n      let beforeForPrefix = beforeRaw;\n      if (unitMatch && unitMatch.side === \"before\") {\n        const rawTrim = beforeRaw.trimEnd();\n        // unitMatch.matched \u306F\u5C0F\u6587\u5B57\u5316\u3055\u308C\u305F\u30AD\u30FC\u306A\u306E\u3067\u3001\u9577\u3055\u3067\u5207\u308A\u843D\u3068\u3059\n        // \u672B\u5C3E\u306B\u4E00\u81F4\u3059\u308B\u5206\u3060\u3051\u9664\u53BB\u3057\u3001\u4F8B\u3048\u3070\u300C\u5404\u5C0F\u3055\u3058\u300D\u2192\u300C\u5404\u300D\u3092\u7DAD\u6301\u3059\u308B\n        if (rawTrim.toLowerCase().endsWith(unitMatch.matched)) {\n          beforeForPrefix = rawTrim.slice(\n            0,\n            rawTrim.length - unitMatch.matched.length\n          );\n        }\n      }\n      const m = beforeForPrefix.match(/([\u4E00-\u9FAF\u3041-\u3094\u30A1-\u30F4\u30FCa-zA-Z]+)$/);\n      if (m && m[1]) prefix = m[1];\n    }\n  }\n\n  return {\n    quantity,\n    quantityRange,\n    unit,\n    unitText,\n    prefix,\n    suffix,\n    hasNumber: quantity !== undefined || quantityRange !== undefined,\n    isNonScalable: quantity === undefined && quantityRange === undefined,\n    originalExpression,\n  };\n}\n\nexport function extractUnit(\n  text: string\n): { unit: CanonicalUnit; unitText: string } | undefined {\n  const haystack = text.toLowerCase();\n  for (const [unitStrLower, canonicalUnit] of SORTED_UNIT_ENTRIES) {\n    if (haystack.includes(unitStrLower)) {\n      return {\n        unit: canonicalUnit,\n        unitText: unitDisplayJa[canonicalUnit] || unitStrLower,\n      };\n    }\n  }\n  return undefined;\n}\n\nexport function extractUnitAdjacent(\n  beforeLowerTrim: string,\n  afterLowerTrim: string\n):\n  | {\n      unit: CanonicalUnit;\n      unitText: string;\n      matched: string;\n      side: \"before\" | \"after\";\n    }\n  | undefined {\n  // \u500B\u30FB\u672C \u306A\u3069\u306E\u500B\u6570\u7CFB\u304C\u5F8C\u7F6E\u3055\u308C\u3001\u524D\u7F6E\u306B\u300C\u5927\u300D\u300C\u5C0F\u300D\uFF08\u5927\u3055\u3058/\u5C0F\u3055\u3058\uFF09\u306E\u66D6\u6627\u8868\u73FE\u304C\u3042\u308B\u5834\u5408\u306F\u3001\u5F8C\u7F6E\u306E\u500B\u6570\u7CFB\u3092\u512A\u5148\n  const countStarts: Array<[string, CanonicalUnit]> = [\n    [\"\u500B\", \"piece\"],\n    [\"\u672C\", \"stalk\"],\n    [\"\u679A\", \"slice\"],\n    [\"\u4E01\", \"block\"],\n    [\"\u7247\", \"clove\"],\n    [\"\u7F36\", \"can\"],\n    [\"\u30D1\u30C3\u30AF\", \"pack\"],\n    [\"\u888B\", \"bag\"],\n    [\"\u675F\", \"bunch\"],\n    [\"\u682A\", \"head\"],\n    [\"\u5C3E\", \"tail\"],\n    [\"\u7C92\", \"grain\"],\n  ];\n  for (const [jp, cu] of countStarts) {\n    if (afterLowerTrim.startsWith(jp)) {\n      return {\n        unit: cu,\n        unitText: unitDisplayJa[cu] || jp,\n        matched: jp,\n        side: \"after\",\n      };\n    }\n  }\n\n  for (const [unitStrLower, canonicalUnit] of SORTED_UNIT_ENTRIES) {\n    if (\n      afterLowerTrim.startsWith(unitStrLower) ||\n      beforeLowerTrim.endsWith(unitStrLower)\n    ) {\n      return {\n        unit: canonicalUnit,\n        unitText: unitDisplayJa[canonicalUnit] || unitStrLower,\n        matched: unitStrLower,\n        side: afterLowerTrim.startsWith(unitStrLower) ? \"after\" : \"before\",\n      };\n    }\n  }\n  if (afterLowerTrim.startsWith(\"\u3053\") || beforeLowerTrim.endsWith(\"\u3053\")) {\n    return {\n      unit: \"piece\",\n      unitText: unitDisplayJa[\"piece\"],\n      matched: \"\u3053\",\n      side: afterLowerTrim.startsWith(\"\u3053\") ? \"after\" : \"before\",\n    };\n  }\n  return undefined;\n}\n", "/*\n  Quantity formatting and rounding helpers\n*/\nimport {\n  CanonicalUnit,\n  NormalizedIngredient,\n  NormalizedYield,\n  unitDisplayJa,\n} from \"./core.js\";\n\nfunction convertForDisplay(\n  value: number,\n  unit?: CanonicalUnit\n): { value: number; unit?: CanonicalUnit } {\n  if (unit === \"tsp\") {\n    const tbspEq = value / 3;\n    if (tbspEq >= 4) {\n      return { value: tbspEq * 15, unit: \"ml\" };\n    }\n    if (value >= 3) {\n      return { value: tbspEq, unit: \"tbsp\" };\n    }\n    return { value, unit };\n  }\n  if (unit === \"tbsp\") {\n    if (value >= 4) {\n      return { value: value * 15, unit: \"ml\" };\n    }\n    return { value, unit };\n  }\n  return { value, unit };\n}\n\nfunction toNaturalJapaneseFraction(\n  value: number,\n  unit?: CanonicalUnit\n): string {\n  // \u8868\u793A\u30DD\u30EA\u30B7\u30FC:\n  // - \u5927\u3055\u3058/\u5C0F\u3055\u3058/\u30AB\u30C3\u30D7\u4EE5\u5916\u306F\u5E38\u306B\u5C0F\u6570\u8868\u793A\uFF08\u5206\u6570\u306F\u4F7F\u308F\u306A\u3044\uFF09\n  // - 10\u4EE5\u4E0A\u306E\u6570\u306F\u5C0F\u6570\u70B9\u4EE5\u4E0B\u5207\u308A\u6368\u3066\n  // - \u30B9\u30D7\u30FC\u30F3/\u30AB\u30C3\u30D7\u306F1/4\u523B\u307F\u3067\u4E38\u3081\u305F\u5C0F\u6570\u8868\u793A\n  const isSpoonOrCup = unit === \"tsp\" || unit === \"tbsp\" || unit === \"cup\";\n  const clampForLarge = (v: number) => (v >= 10 ? Math.floor(v) : v);\n  if (isSpoonOrCup) {\n    const rounded = Math.round(value * 4) / 4;\n    const v = clampForLarge(rounded);\n    // 1.0 \u2192 1 \u306E\u3088\u3046\u306B\u672B\u5C3E\u306E .0 \u306F\u843D\u3068\u3059\n    return Number.isInteger(v) ? `${Math.trunc(v)}` : `${v}`;\n  }\n  // \u8CEA\u91CF\u30FB\u4F53\u7A4D\u30FB\u4EBA\u30FB\u500B\u306A\u3069 \u3059\u3079\u3066\u5C0F\u6570\u8868\u793A\uFF08\u5358\u4F4D\u5225\u4E38\u3081\uFF09\n  let rounded: number;\n  switch (unit) {\n    case \"g\":\n    case \"ml\":\n    case \"mg\":\n    case \"l\":\n    case \"kg\":\n      rounded = Math.round(value * 10) / 10;\n      break;\n    default:\n      rounded = Math.round(value * 10) / 10;\n      break;\n  }\n  const v = clampForLarge(rounded);\n  return Number.isInteger(v) ? `${Math.trunc(v)}` : `${v}`;\n}\n\nexport function formatQuantity(value?: number, unit?: CanonicalUnit): string {\n  if (value == null) return \"\";\n  const { value: dispValue, unit: dispUnit } = convertForDisplay(value, unit);\n  const frac = toNaturalJapaneseFraction(dispValue, dispUnit);\n  const unitStr = dispUnit ? unitDisplayJa[dispUnit] ?? \"\" : \"\";\n  if (dispUnit === \"pinch\") {\n    const intLike = Math.abs(dispValue - Math.round(dispValue)) < 1e-6;\n    if (Math.abs(value - 1) < 1e-6) return \"\u3072\u3068\u3064\u307E\u307F\";\n    if (intLike) return `${Math.round(dispValue)}\u3064\u307E\u307F`;\n    return `${frac} ${unitStr}`.trim();\n  }\n  if (dispUnit === \"tbsp\" || dispUnit === \"tsp\") {\n    return `${unitStr}${frac}`;\n  }\n  return `${frac}${unitStr ? \" \" + unitStr : \"\"}`.trim();\n}\n\nexport function formatQuantityRange(\n  min: number,\n  max: number,\n  unit?: CanonicalUnit\n): string {\n  const maxDisp = convertForDisplay(max, unit);\n  let displayUnit = maxDisp.unit;\n\n  let minValue: number;\n  let maxValue: number;\n  if (displayUnit === \"ml\") {\n    const toMl = (v: number): number => {\n      if (unit === \"ml\") return v;\n      if (unit === \"tbsp\") return v * 15;\n      if (unit === \"tsp\") return (v / 3) * 15;\n      return v;\n    };\n    minValue = toMl(min);\n    maxValue = toMl(max);\n  } else if (displayUnit === \"tbsp\") {\n    const toTbsp = (v: number): number => {\n      if (unit === \"tbsp\") return v;\n      if (unit === \"tsp\") return v / 3;\n      return v;\n    };\n    minValue = toTbsp(min);\n    maxValue = toTbsp(max);\n  } else if (displayUnit === \"tsp\") {\n    minValue = min;\n    maxValue = max;\n  } else {\n    const minStr = toNaturalJapaneseFraction(min, unit);\n    const maxStr = toNaturalJapaneseFraction(max, unit);\n    const unitStr = unit ? unitDisplayJa[unit] ?? \"\" : \"\";\n    return `${minStr}\u301C${maxStr}${unitStr ? \" \" + unitStr : \"\"}`.trim();\n  }\n\n  const minStr = toNaturalJapaneseFraction(minValue, displayUnit);\n  const maxStr = toNaturalJapaneseFraction(maxValue, displayUnit);\n  const unitStr = displayUnit ? unitDisplayJa[displayUnit] ?? \"\" : \"\";\n\n  if (displayUnit === \"tbsp\" || displayUnit === \"tsp\") {\n    return `${unitStr}${minStr}\u301C${maxStr}`;\n  }\n  return `${minStr}\u301C${maxStr}${unitStr ? \" \" + unitStr : \"\"}`.trim();\n}\n\nexport function formatIngredientQuantities(ing: NormalizedIngredient): string {\n  let primaryCore = \"\";\n  if (ing.quantityRange) {\n    primaryCore = formatQuantityRange(\n      ing.quantityRange.min,\n      ing.quantityRange.max,\n      ing.unit\n    );\n  } else {\n    primaryCore = formatQuantity(ing.quantity, ing.unit);\n  }\n  const primary = `${ing.prefix ?? \"\"}${primaryCore}${ing.suffix ?? \"\"}`.trim();\n  let secondary = \"\";\n  if (ing.secondaryQuantityRange) {\n    const secondaryCore = formatQuantityRange(\n      ing.secondaryQuantityRange.min,\n      ing.secondaryQuantityRange.max,\n      ing.secondaryUnit\n    );\n    secondary = `${ing.secondaryPrefix ?? \"\"}${secondaryCore}${\n      ing.secondarySuffix ?? \"\"\n    }`;\n  } else if (ing.secondaryQuantity != null) {\n    const secondaryCore = formatQuantity(\n      ing.secondaryQuantity,\n      ing.secondaryUnit\n    );\n    secondary = `${ing.secondaryPrefix ?? \"\"}${secondaryCore}${\n      ing.secondarySuffix ?? \"\"\n    }`;\n  }\n  if (secondary) return `${primary}\uFF08${secondary}\uFF09`.trim();\n  return primary.trim();\n}\n\nexport function formatRecipeYield(y: NormalizedYield | undefined): string {\n  if (!y) return \"\";\n  const parts: string[] = [];\n  if (y.prefix) parts.push(y.prefix.trim());\n\n  let core = \"\";\n  if (y.quantityRange) {\n    // Yield \u8868\u793A\u3067\u306F\u3001\u53EF\u80FD\u306A\u3089\u5143\u306E\u5358\u4F4D\u8868\u8A18\uFF08unitText\uFF09\u3092\u512A\u5148\n    // Yield \u8868\u793A\u3067\u306F\u3001\u53EF\u80FD\u306A\u3089\u5143\u306E\u5358\u4F4D\u8868\u8A18\uFF08unitText\uFF09\u3092\u512A\u5148\n    if (y.unitText) {\n      const minStr = toNaturalJapaneseFraction(y.quantityRange.min, y.unit);\n      const maxStr = toNaturalJapaneseFraction(y.quantityRange.max, y.unit);\n      core = `${minStr}\u301C${maxStr}${y.unitText}`;\n    } else {\n      core = formatQuantityRange(\n        y.quantityRange.min,\n        y.quantityRange.max,\n        y.unit\n      );\n    }\n  } else if (y.quantity != null) {\n    if (y.unitText) {\n      const v = toNaturalJapaneseFraction(y.quantity, y.unit);\n      core = `${v}${y.unitText}`;\n    } else {\n      core = formatQuantity(y.quantity, y.unit);\n    }\n  }\n\n  if (core) parts.push(core);\n  if (y.suffix) parts.push(y.suffix.trim());\n\n  let txt = parts.join(\"\").trim();\n\n  // secondary \u8868\u793A\n  let secondary = \"\";\n  if (y.secondaryQuantityRange) {\n    secondary = formatQuantityRange(\n      y.secondaryQuantityRange.min,\n      y.secondaryQuantityRange.max,\n      y.secondaryUnit\n    );\n  } else if (y.secondaryQuantity != null) {\n    secondary = formatQuantity(y.secondaryQuantity, y.secondaryUnit);\n  }\n  if (secondary) {\n    const secTxt = `${y.secondaryPrefix ?? \"\"}${secondary}${\n      y.secondarySuffix ?? \"\"\n    }`;\n    txt = `${txt}\uFF08${secTxt}\uFF09`;\n  }\n  return txt;\n}\n", "import type {\n  CanonicalUnit,\n  NormalizedIngredient,\n  NormalizedInstruction,\n  NormalizedRecipe,\n  NormalizedYield,\n} from \"./core.js\";\nimport { roundForUnit } from \"./core.js\";\nimport {\n  formatQuantity,\n  formatQuantityRange,\n  formatRecipeYield,\n} from \"./format.js\";\nimport {\n  normalizeRecipe,\n  parseIngredientLine,\n  parseRecipeYield,\n} from \"./parse.js\";\n// scaling helpers are implemented inline in methods where feasible\n\nexport class Ingredient {\n  constructor(public readonly data: NormalizedIngredient) {}\n\n  static parse(line: string): Ingredient {\n    return new Ingredient(parseIngredientLine(line));\n  }\n\n  // Convenience field getters\n  get originalText(): string {\n    return this.data.originalText;\n  }\n  get name(): string {\n    return this.data.name;\n  }\n  get quantity(): number | undefined {\n    return this.data.quantity;\n  }\n  get quantityRange(): { min: number; max: number } | undefined {\n    return this.data.quantityRange;\n  }\n  get unit(): CanonicalUnit | undefined {\n    return this.data.unit;\n  }\n  get unitText(): string | undefined {\n    return this.data.unitText;\n  }\n  get prefix(): string | undefined {\n    return this.data.prefix;\n  }\n  get suffix(): string | undefined {\n    return this.data.suffix;\n  }\n  get secondaryQuantity(): number | undefined {\n    return this.data.secondaryQuantity;\n  }\n  get secondaryQuantityRange(): { min: number; max: number } | undefined {\n    return this.data.secondaryQuantityRange;\n  }\n  get secondaryUnit(): CanonicalUnit | undefined {\n    return this.data.secondaryUnit;\n  }\n  get secondaryUnitText(): string | undefined {\n    return this.data.secondaryUnitText;\n  }\n  get secondaryPrefix(): string | undefined {\n    return this.data.secondaryPrefix;\n  }\n  get secondarySuffix(): string | undefined {\n    return this.data.secondarySuffix;\n  }\n  get scalable(): boolean {\n    return this.data.scalable;\n  }\n\n  scale(factor: number): Ingredient {\n    const ing = this.data;\n    if (!ing.scalable) return new Ingredient(ing);\n\n    // Primary\n    let quantity = ing.quantity;\n    let quantityRange = ing.quantityRange;\n    if (typeof quantity === \"number\") {\n      quantity = roundForUnit(quantity * factor, ing.unit);\n    }\n    if (quantityRange) {\n      quantityRange = {\n        min: roundForUnit(quantityRange.min * factor, ing.unit),\n        max: roundForUnit(quantityRange.max * factor, ing.unit),\n      };\n    }\n\n    // Secondary\n    let secondaryQuantity = ing.secondaryQuantity;\n    let secondaryQuantityRange = ing.secondaryQuantityRange;\n    if (typeof secondaryQuantity === \"number\") {\n      secondaryQuantity = roundForUnit(\n        secondaryQuantity * factor,\n        ing.secondaryUnit\n      );\n    }\n    if (secondaryQuantityRange) {\n      secondaryQuantityRange = {\n        min: roundForUnit(\n          secondaryQuantityRange.min * factor,\n          ing.secondaryUnit\n        ),\n        max: roundForUnit(\n          secondaryQuantityRange.max * factor,\n          ing.secondaryUnit\n        ),\n      };\n    }\n\n    const scaled: NormalizedIngredient = {\n      ...ing,\n      quantity,\n      quantityRange,\n      secondaryQuantity,\n      secondaryQuantityRange,\n    };\n    return new Ingredient(scaled);\n  }\n\n  format(): string {\n    const ing = this.data;\n\n    let primaryCore = \"\";\n    if (ing.quantityRange) {\n      primaryCore = formatQuantityRange(\n        ing.quantityRange.min,\n        ing.quantityRange.max,\n        ing.unit\n      );\n    } else {\n      primaryCore = formatQuantity(ing.quantity, ing.unit);\n    }\n    const primary = `${ing.prefix ?? \"\"}${primaryCore}${\n      ing.suffix ?? \"\"\n    }`.trim();\n\n    let secondary = \"\";\n    if (ing.secondaryQuantityRange) {\n      const secondaryCore = formatQuantityRange(\n        ing.secondaryQuantityRange.min,\n        ing.secondaryQuantityRange.max,\n        ing.secondaryUnit\n      );\n      secondary = `${ing.secondaryPrefix ?? \"\"}${secondaryCore}${\n        ing.secondarySuffix ?? \"\"\n      }`;\n    } else if (ing.secondaryQuantity != null) {\n      const secondaryCore = formatQuantity(\n        ing.secondaryQuantity,\n        ing.secondaryUnit\n      );\n      secondary = `${ing.secondaryPrefix ?? \"\"}${secondaryCore}${\n        ing.secondarySuffix ?? \"\"\n      }`;\n    }\n\n    if (secondary) return `${primary}\uFF08${secondary}\uFF09`.trim();\n    return primary.trim();\n  }\n\n  toJSON(): NormalizedIngredient {\n    return { ...this.data };\n  }\n}\n\nexport class Instruction {\n  constructor(public readonly data: NormalizedInstruction) {}\n\n  get text(): string {\n    return this.data.text;\n  }\n  get imageUrl(): string | undefined {\n    return this.data.imageUrl;\n  }\n  get name(): string | undefined {\n    return this.data.name;\n  }\n  get url(): string | undefined {\n    return this.data.url;\n  }\n\n  toJSON(): NormalizedInstruction {\n    return { ...this.data };\n  }\n}\n\nexport class Yield {\n  constructor(public readonly data: NormalizedYield | undefined) {}\n\n  static parse(text?: string): Yield {\n    return new Yield(parseRecipeYield(text));\n  }\n\n  // Accessors mirror NormalizedYield fields\n  get originalText(): string | undefined {\n    return this.data?.originalText;\n  }\n  get quantity(): number | undefined {\n    return this.data?.quantity;\n  }\n  get quantityRange(): { min: number; max: number } | undefined {\n    return this.data?.quantityRange;\n  }\n  get unit(): CanonicalUnit | undefined {\n    return this.data?.unit;\n  }\n  get unitText(): string | undefined {\n    return this.data?.unitText;\n  }\n  get prefix(): string | undefined {\n    return this.data?.prefix;\n  }\n  get suffix(): string | undefined {\n    return this.data?.suffix;\n  }\n  get secondaryQuantity(): number | undefined {\n    return this.data?.secondaryQuantity;\n  }\n  get secondaryQuantityRange(): { min: number; max: number } | undefined {\n    return this.data?.secondaryQuantityRange;\n  }\n  get secondaryUnit(): CanonicalUnit | undefined {\n    return this.data?.secondaryUnit;\n  }\n  get secondaryUnitText(): string | undefined {\n    return this.data?.secondaryUnitText;\n  }\n  get secondaryPrefix(): string | undefined {\n    return this.data?.secondaryPrefix;\n  }\n  get secondarySuffix(): string | undefined {\n    return this.data?.secondarySuffix;\n  }\n  get scalable(): boolean | undefined {\n    return this.data?.scalable;\n  }\n\n  format(): string {\n    return formatRecipeYield(this.data);\n  }\n\n  toJSON(): NormalizedYield | undefined {\n    return this.data ? { ...this.data } : undefined;\n  }\n}\n\nexport class Recipe {\n  constructor(public readonly data: NormalizedRecipe) {}\n\n  static fromJsonLd(raw: any): Recipe {\n    return new Recipe(normalizeRecipe(raw));\n  }\n\n  get name(): string | undefined {\n    return this.data.name;\n  }\n  get imageUrl(): string | undefined {\n    return this.data.imageUrl;\n  }\n  get author(): string | undefined {\n    return this.data.author;\n  }\n  get baseServings(): number | undefined {\n    return this.data.baseServings;\n  }\n  get ingredients(): Ingredient[] {\n    return this.data.ingredients.map((i) => new Ingredient(i));\n  }\n  get instructions(): Instruction[] {\n    return this.data.instructions.map((i) => new Instruction(i));\n  }\n  get times(): { prep?: string; cook?: string; total?: string } | undefined {\n    return this.data.times;\n  }\n  get nutrition(): Record<string, string> | undefined {\n    return this.data.nutrition;\n  }\n  get yield(): Yield {\n    return new Yield(parseRecipeYield(this.data.yieldText));\n  }\n\n  formatYield(): string {\n    return this.yield.format();\n  }\n\n  // Returns new Recipe instance (non-destructive)\n  scale(toServings: number): Recipe {\n    const base =\n      this.data.baseServings && this.data.baseServings > 0\n        ? this.data.baseServings\n        : 2;\n    const factor = toServings / base;\n    const scaledIngredients: NormalizedIngredient[] = this.data.ingredients.map(\n      (i) => new Ingredient(i).scale(factor).toJSON()\n    );\n    const scaled: NormalizedRecipe = {\n      ...this.data,\n      ingredients: scaledIngredients,\n      // baseServings \u306F\u521D\u671F\u5024\u3092\u7DAD\u6301\uFF08\u9023\u7D9A\u30B9\u30B1\u30FC\u30EB\u6642\u306E\u30C9\u30EA\u30D5\u30C8\u9632\u6B62\uFF09\n      baseServings: this.data.baseServings,\n    };\n    return new Recipe(scaled);\n  }\n\n  toJSON(): NormalizedRecipe {\n    return { ...this.data };\n  }\n}\n", "import { getJsonLdScriptsFromDocument } from \"../../src/dom/jsonld\";\nimport { parseJsonLdRecipesFromScripts, Recipe } from \"../../src/index\";\n\n// \u30B0\u30ED\u30FC\u30D0\u30EB\u306A\u72B6\u614B\u7BA1\u7406\nlet currentSidebar: HTMLIFrameElement | null = null;\nlet currentRecipeData: any = null;\n\nconst HOST_COMP_STYLE_ID = \"recipe-sidebar-host-compensation\";\nconst SIDEBAR_WIDTH_CSS = \"min(360px, 40vw)\";\n\nfunction injectHostCompensationStyles() {\n  const style = document.createElement(\"style\");\n  style.textContent = `\n    html { \n      margin-right: ${SIDEBAR_WIDTH_CSS} !important; \n      overflow-y: auto !important;\n      height: auto !important;\n      min-height: 100% !important;\n    }\n    body {\n      overflow-x: hidden !important; \n      overflow-y: auto !important;\n      height: auto !important;\n      min-height: 100% !important;\n      box-sizing: border-box !important;\n    }\n  `;\n  document.head.appendChild(style);\n}\n\nfunction removeHostCompensationStyles() {\n  const style = document.getElementById(HOST_COMP_STYLE_ID);\n  if (style && style.parentNode) style.parentNode.removeChild(style);\n}\n\nfunction showSidebar() {\n  if (currentSidebar) {\n    // \u65E2\u306B\u8868\u793A\u3055\u308C\u3066\u3044\u308B\u5834\u5408\u306F\u4F55\u3082\u3057\u306A\u3044\n    return;\n  }\n\n  if (!currentRecipeData) {\n    // \u30EC\u30B7\u30D4\u30C7\u30FC\u30BF\u304C\u306A\u3044\u5834\u5408\u306F\u691C\u7D22\u3092\u8A66\u884C\n    const scripts = getJsonLdScriptsFromDocument(document);\n    const recipesRaw = parseJsonLdRecipesFromScripts(scripts);\n    if (!recipesRaw.length) return;\n    currentRecipeData = recipesRaw[0];\n  }\n\n  const normalizedRecipe = Recipe.fromJsonLd(currentRecipeData);\n  currentSidebar = createSidebarWithIframe(normalizedRecipe, currentRecipeData);\n  injectHostCompensationStyles();\n}\n\nfunction hideSidebar() {\n  if (currentSidebar) {\n    currentSidebar.remove();\n    currentSidebar = null;\n    removeHostCompensationStyles();\n  }\n}\n\nfunction toggleSidebar() {\n  if (currentSidebar) {\n    hideSidebar();\n  } else {\n    showSidebar();\n  }\n}\n\nfunction createSidebarWithIframe(recipe: Recipe, rawRecipeData: any): HTMLIFrameElement {\n  // iframe\u3092\u4F5C\u6210\n  const iframe = document.createElement(\"iframe\");\n  iframe.id = \"recipe-sidebar-iframe\";\n  iframe.src = chrome.runtime.getURL(\"./iframe-content.html\");\n  iframe.style.cssText = `\n    position: fixed !important;\n    top: 0 !important;\n    right: 0 !important;\n    height: 100vh !important;\n    width: ${SIDEBAR_WIDTH_CSS} !important;\n    border: none !important;\n    box-shadow: 0 0 12px rgba(0,0,0,0.15) !important;\n    border-left: 1px solid #eee !important;\n    z-index: 2147483647 !important;\n    background: white !important;\n    overflow: hidden !important;\n  `;\n\n  // iframe\u304B\u3089\u306E\u30E1\u30C3\u30BB\u30FC\u30B8\u3092\u53D7\u4FE1\n  let iframeReady = false;\n\n  window.addEventListener('message', (event) => {\n    if (event.source !== iframe.contentWindow) return;\n\n    if (event.data.type === 'IFRAME_READY') {\n      iframeReady = true;\n      // \u30EC\u30B7\u30D4\u30C7\u30FC\u30BF\u3092\u9001\u4FE1\n      iframe.contentWindow?.postMessage({\n        type: 'RECIPE_DATA',\n        recipe: rawRecipeData\n      }, '*');\n    } else if (event.data.type === 'CLOSE_SIDEBAR') {\n      hideSidebar();\n    }\n  });\n\n  // iframe\u8AAD\u307F\u8FBC\u307F\u5B8C\u4E86\u6642\u306E\u51E6\u7406\n  iframe.onload = () => {\n    if (!iframeReady) {\n      // \u30D5\u30A9\u30FC\u30EB\u30D0\u30C3\u30AF: \u5C11\u3057\u5F85\u3063\u3066\u304B\u3089\u30EC\u30B7\u30D4\u30C7\u30FC\u30BF\u3092\u9001\u4FE1\n      setTimeout(() => {\n        iframe.contentWindow?.postMessage({\n          type: 'RECIPE_DATA',\n          recipe: rawRecipeData\n        }, '*');\n      }, 100);\n    }\n  };\n\n  const host = (document.body || document.documentElement);\n  host.appendChild(iframe);\n\n  try {\n    console.log(\"[recipe-ext] Iframe sidebar created\");\n  } catch { }\n\n  return iframe;\n}\n\nfunction main() {\n  try {\n    const scripts = getJsonLdScriptsFromDocument(document);\n    const recipesRaw = parseJsonLdRecipesFromScripts(scripts);\n    if (!recipesRaw.length) return;\n\n    // \u30EC\u30B7\u30D4\u30C7\u30FC\u30BF\u3092\u4FDD\u5B58\n    currentRecipeData = recipesRaw[0];\n\n    // \u81EA\u52D5\u8868\u793A\n    showSidebar();\n\n  } catch (e) {\n    // silent fail\n  }\n}\n\n// background\u304B\u3089\u306E\u30E1\u30C3\u30BB\u30FC\u30B8\u3092\u53D7\u4FE1\nchrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n  if (message.type === 'TOGGLE_SIDEBAR') {\n    toggleSidebar();\n    sendResponse({ success: true });\n  }\n});\n\n// run once at document end\nmain();\n\n\n"],
  "mappings": "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",
  "names": ["num", "v", "rounded", "minStr", "maxStr", "unitStr"]
}
